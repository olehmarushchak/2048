{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","src/scripts/randomAddCellToEmpty.js","src/scripts/fillRandomEmptyPlacesStart.js","src/scripts/moveTile.js","src/modules/constants.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable max-len */ /* eslint-disable no-console */ function $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\nfunction $6abde36fb3b0ae39$export$79121081a2a7196a(max) {\n    var indexes = [];\n    var count = 0;\n    while(count < 4){\n        var randomIndex = Math.floor(Math.random() * max);\n        if (!indexes.includes(randomIndex)) {\n            if (Math.random() < 0.1) {\n                indexes.push(randomIndex);\n                count++;\n            } else if (count < 2) {\n                indexes.push(randomIndex);\n                count++;\n            }\n        }\n    }\n    return indexes;\n}\nfunction $6abde36fb3b0ae39$export$fe52599b6fc81048(field) {\n    if (!Array.isArray(field)) {\n        // eslint-disable-next-line no-console\n        console.error(\"Expected field to be an array.\");\n        return field;\n    }\n    var emptyPositions = [];\n    for(var i = 0; i < field.length; i++){\n        for(var j = 0; j < field[i].length; j++)if (field[i][j] === 0) emptyPositions.push({\n            x: i,\n            y: j\n        });\n    }\n    if (emptyPositions.length === 0) {\n        if (0, $197cd56b15c33885$export$46253330eead970a) (0, $197cd56b15c33885$export$46253330eead970a).classList.remove(\"hidden\");\n        return field;\n    }\n    // Randomly select an empty position\n    var randomIndex = Math.floor(Math.random() * emptyPositions.length);\n    var _emptyPositions_randomIndex = emptyPositions[randomIndex], x = _emptyPositions_randomIndex.x, y = _emptyPositions_randomIndex.y;\n    // Randomly decide whether to add 2 or 4\n    var valueToAdd = Math.random() < 0.9 ? 2 : 4;\n    field[x][y] = valueToAdd;\n    return field;\n}\n\n\n\nfunction $e3be7800829786bf$export$49b6d2742e2e2e38(field) {\n    if (!Array.isArray(field)) {\n        // eslint-disable-next-line no-console\n        console.error(\"Expected field to be an array.\");\n        return field;\n    }\n    var emptyPositions = [];\n    for(var i = 0; i < field.length; i++){\n        for(var j = 0; j < field[i].length; j++)if (field[i][j] === 0) emptyPositions.push({\n            x: i,\n            y: j\n        });\n    }\n    if (emptyPositions.length >= 2) {\n        var randomIndexes = (0, $6abde36fb3b0ae39$export$79121081a2a7196a)(emptyPositions.length);\n        for(var i1 = 0; i1 < 2; i1++){\n            var _emptyPositions_randomIndexes_i = emptyPositions[randomIndexes[i1]], x = _emptyPositions_randomIndexes_i.x, y = _emptyPositions_randomIndexes_i.y;\n            field[x][y] = 2;\n        }\n    } else // eslint-disable-next-line no-console\n    console.log(\"Not enough empty positions to fill.\");\n    return field;\n}\n\n\nfunction $46396ee5d674c042$export$c590f9015b9c5094(tileField, size, direction) {\n    var mergeOccurred = false;\n    // eslint-disable-next-line max-len\n    var mergedTiles = new Array(size).fill(false); // Array to track merged tiles\n    switch(direction){\n        case \"left\":\n            // Compact tiles (move all tiles to the left)\n            for(var row = 0; row < size; row++){\n                for(var col = 1; col < size; col++)if (tileField[row][col] !== 0) {\n                    var currentCol = col;\n                    while(currentCol > 0 && tileField[row][currentCol - 1] === 0){\n                        // Move tile to the left\n                        tileField[row][currentCol - 1] = tileField[row][currentCol];\n                        tileField[row][currentCol] = 0;\n                        currentCol--;\n                    }\n                }\n            }\n            break;\n        case \"right\":\n            // Compact tiles (move all tiles to the right)\n            for(var row1 = 0; row1 < size; row1++){\n                for(var col1 = size - 2; col1 >= 0; col1--)if (tileField[row1][col1] !== 0) {\n                    var currentCol1 = col1;\n                    while(currentCol1 < size - 1 && tileField[row1][currentCol1 + 1] === 0){\n                        // Move tile to the right\n                        tileField[row1][currentCol1 + 1] = tileField[row1][currentCol1];\n                        tileField[row1][currentCol1] = 0;\n                        currentCol1++;\n                    }\n                }\n            }\n            break;\n        case \"up\":\n            // Compact tiles (move all tiles upwards)\n            for(var col2 = 0; col2 < size; col2++){\n                for(var row2 = 1; row2 < size; row2++)if (tileField[row2][col2] !== 0) {\n                    var currentRow = row2;\n                    while(currentRow > 0 && tileField[currentRow - 1][col2] === 0){\n                        // Move tile upwards\n                        tileField[currentRow - 1][col2] = tileField[currentRow][col2];\n                        tileField[currentRow][col2] = 0;\n                        currentRow--;\n                    }\n                }\n            }\n            break;\n        case \"down\":\n            // Compact tiles (move all tiles downwards)\n            for(var col3 = 0; col3 < size; col3++){\n                for(var row3 = size - 2; row3 >= 0; row3--)if (tileField[row3][col3] !== 0) {\n                    var currentRow1 = row3;\n                    while(currentRow1 < size - 1 && tileField[currentRow1 + 1][col3] === 0){\n                        // Move tile downwards\n                        tileField[currentRow1 + 1][col3] = tileField[currentRow1][col3];\n                        tileField[currentRow1][col3] = 0;\n                        currentRow1++;\n                    }\n                }\n            }\n            break;\n        default:\n            throw new Error(\"Invalid direction: \".concat(direction));\n    }\n    // Merge tiles (combine adjacent identical tiles)\n    switch(direction){\n        case \"left\":\n            for(var row4 = 0; row4 < size; row4++){\n                for(var col4 = 1; col4 < size; col4++)if (tileField[row4][col4] !== 0 && tileField[row4][col4] === tileField[row4][col4 - 1] && !mergedTiles[col4 - 1]) {\n                    // Merge tiles\n                    tileField[row4][col4 - 1] *= 2;\n                    tileField[row4][col4] = 0;\n                    mergedTiles[col4 - 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"right\":\n            for(var row5 = 0; row5 < size; row5++){\n                for(var col5 = size - 2; col5 >= 0; col5--)if (tileField[row5][col5] !== 0 && tileField[row5][col5] === tileField[row5][col5 + 1] && !mergedTiles[col5 + 1]) {\n                    // Merge tiles\n                    tileField[row5][col5 + 1] *= 2;\n                    tileField[row5][col5] = 0;\n                    mergedTiles[col5 + 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"up\":\n            for(var col6 = 0; col6 < size; col6++){\n                for(var row6 = 1; row6 < size; row6++)if (tileField[row6][col6] !== 0 && tileField[row6][col6] === tileField[row6 - 1][col6] && !mergedTiles[row6 - 1]) {\n                    // Merge tiles\n                    tileField[row6 - 1][col6] *= 2;\n                    tileField[row6][col6] = 0;\n                    mergedTiles[row6 - 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"down\":\n            for(var col7 = 0; col7 < size; col7++){\n                for(var row7 = size - 2; row7 >= 0; row7--)if (tileField[row7][col7] !== 0 && tileField[row7][col7] === tileField[row7 + 1][col7] && !mergedTiles[row7 + 1]) {\n                    // Merge tiles\n                    tileField[row7 + 1][col7] *= 2;\n                    tileField[row7][col7] = 0;\n                    mergedTiles[row7 + 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        default:\n            throw new Error(\"Invalid direction: \".concat(direction));\n    }\n    return {\n        mergeOccurred: mergeOccurred,\n        tileField: tileField\n    };\n}\n\n\nvar $75b403991082ef97$export$cb0e242d14fc87d0 = \"game run\";\nvar $75b403991082ef97$export$7be0f359cf83fae4 = \"game is not started\";\nvar $75b403991082ef97$export$21b07c8f274aebd5 = {\n    RIGHT: \"right\",\n    LEFT: \"left\",\n    DOWN: \"down\",\n    UP: \"up\"\n};\nvar $75b403991082ef97$export$e62c44db5dabc4ee = 2048;\n\n\n\"use strict\";\n\nvar $3d28d7f1aac198f5$require$STATUS_RUN = $75b403991082ef97$export$cb0e242d14fc87d0;\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"initialState\", void 0);\n        this.initialState = initialState;\n        console.log(this.initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var tileField = this.initialState.tileField;\n                var size = tileField.length;\n                var _moveTiles = (0, $46396ee5d674c042$export$c590f9015b9c5094)(tileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).UP), mergeOccurred = _moveTiles.mergeOccurred, newTileField = _moveTiles.tileField;\n                if (mergeOccurred) (0, $46396ee5d674c042$export$c590f9015b9c5094)(newTileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).UP); // Compact tiles again after merging\n                (0, $6abde36fb3b0ae39$export$fe52599b6fc81048)(this.initialState.tileField);\n                console.log(newTileField); // Log the updated tileField after moving up\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var tileField = this.initialState.tileField;\n                var size = tileField.length;\n                var _moveTiles = (0, $46396ee5d674c042$export$c590f9015b9c5094)(tileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).LEFT), mergeOccurred = _moveTiles.mergeOccurred, newTileField = _moveTiles.tileField;\n                if (mergeOccurred) (0, $46396ee5d674c042$export$c590f9015b9c5094)(newTileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).LEFT);\n                (0, $6abde36fb3b0ae39$export$fe52599b6fc81048)(this.initialState.tileField);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var tileField = this.initialState.tileField;\n                var size = tileField.length;\n                var _moveTiles = (0, $46396ee5d674c042$export$c590f9015b9c5094)(tileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).RIGHT), mergeOccurred = _moveTiles.mergeOccurred, newTileField = _moveTiles.tileField;\n                if (mergeOccurred) (0, $46396ee5d674c042$export$c590f9015b9c5094)(newTileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).RIGHT); // Compact tiles again after merging\n                (0, $6abde36fb3b0ae39$export$fe52599b6fc81048)(this.initialState.tileField);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var tileField = this.initialState.tileField;\n                var size = tileField.length;\n                var _moveTiles = (0, $46396ee5d674c042$export$c590f9015b9c5094)(tileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).DOWN), mergeOccurred = _moveTiles.mergeOccurred, newTileField = _moveTiles.tileField;\n                if (mergeOccurred) (0, $46396ee5d674c042$export$c590f9015b9c5094)(newTileField, size, (0, $75b403991082ef97$export$21b07c8f274aebd5).DOWN); // Compact tiles again after merging\n                (0, $6abde36fb3b0ae39$export$fe52599b6fc81048)(this.initialState.tileField);\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                var score = 0;\n                for(var i = 0; i < this.initialState.tileField.length; i++)for(var j = 0; j < this.initialState.tileField[i].length; j++)score += this.initialState.tileField[i][j];\n                this.initialState.score = score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.initialState;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                // eslint-disable-next-line no-console\n                console.log(\"Current status:\", this.initialState.status);\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                (0, $e3be7800829786bf$export$49b6d2742e2e2e38)(this.initialState.tileField);\n                this.initialState.status = $3d28d7f1aac198f5$require$STATUS_RUN;\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.initialState.score = 0;\n                this.initialState.tileField = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"setTile\",\n            value: function setTile() {\n                // eslint-disable-next-line max-len\n                var table = document.querySelector(\".game-field\");\n                if (table) {\n                    var rows = table.querySelectorAll(\".field-row\");\n                    for(var i = 0; i < this.initialState.tileField.length; i++){\n                        var cells = rows[i].querySelectorAll(\".field-cell\");\n                        for(var j = 0; j < this.initialState.tileField[i].length; j++){\n                            var cell = cells[j];\n                            var cellValue = this.initialState.tileField[i][j];\n                            var currentClass = \"field-cell--\".concat(cellValue);\n                            cell.className = \"field-cell\";\n                            if (cellValue !== 0) {\n                                cell.classList.add(currentClass);\n                                cell.textContent = \"\".concat(cellValue);\n                            } else cell.textContent = \"\";\n                        }\n                    }\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\nvar $197cd56b15c33885$var$STATUS_NON_RUN = $75b403991082ef97$export$7be0f359cf83fae4, $197cd56b15c33885$var$STATUS_RUN = $75b403991082ef97$export$cb0e242d14fc87d0, $197cd56b15c33885$var$COUNT_WIN = $75b403991082ef97$export$e62c44db5dabc4ee;\nvar $197cd56b15c33885$var$initialState = {\n    status: $197cd56b15c33885$var$STATUS_NON_RUN,\n    tileField: [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ],\n    score: 0\n};\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports($197cd56b15c33885$var$initialState);\nvar $197cd56b15c33885$export$46253330eead970a = document.getElementById(\"message-lose\");\nvar $197cd56b15c33885$var$startButton = document.getElementById(\"start\");\nvar $197cd56b15c33885$var$restartButton = document.getElementById(\"restart\");\nvar $197cd56b15c33885$var$score = document.getElementById(\"game-score\");\nvar $197cd56b15c33885$var$messageStart = document.getElementById(\"message-start\");\nvar $197cd56b15c33885$var$messageWin = document.getElementById(\"message-win\");\nvar $197cd56b15c33885$var$appendScore = function() {\n    $197cd56b15c33885$var$game.getScore();\n    if ($197cd56b15c33885$var$initialState.score === $197cd56b15c33885$var$COUNT_WIN) $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$score.textContent = \"\".concat($197cd56b15c33885$var$initialState.score);\n};\n// eslint-disable-next-line no-shadow\nvar $197cd56b15c33885$var$moveEvent = function(event) {\n    return $197cd56b15c33885$var$moves(event);\n};\nvar $197cd56b15c33885$var$start = function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$game.setTile();\n    if ($197cd56b15c33885$var$game.getState().status === $197cd56b15c33885$var$STATUS_RUN) {\n        $197cd56b15c33885$var$startButton.classList.add(\"hidden\");\n        $197cd56b15c33885$var$restartButton.classList.remove(\"hidden\");\n    }\n    $197cd56b15c33885$export$46253330eead970a === null || $197cd56b15c33885$export$46253330eead970a === void 0 ? void 0 : $197cd56b15c33885$export$46253330eead970a.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$moveEvent);\n};\nvar $197cd56b15c33885$var$restart = function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$appendScore();\n    $197cd56b15c33885$var$game.setTile();\n    $197cd56b15c33885$var$startButton.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$restartButton.classList.add(\"hidden\");\n    $197cd56b15c33885$export$46253330eead970a === null || $197cd56b15c33885$export$46253330eead970a === void 0 ? void 0 : $197cd56b15c33885$export$46253330eead970a.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveEvent);\n};\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", $197cd56b15c33885$var$start);\n$197cd56b15c33885$var$restartButton.addEventListener(\"click\", $197cd56b15c33885$var$restart);\n// eslint-disable-next-line no-shadow\nvar $197cd56b15c33885$var$moves = function(event) {\n    switch(event.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            $197cd56b15c33885$var$game.setTile();\n            $197cd56b15c33885$var$appendScore();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            $197cd56b15c33885$var$game.setTile();\n            $197cd56b15c33885$var$appendScore();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            $197cd56b15c33885$var$game.setTile();\n            $197cd56b15c33885$var$appendScore();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            $197cd56b15c33885$var$game.setTile();\n            $197cd56b15c33885$var$appendScore();\n            break;\n    }\n};\n\n})();\n//# sourceMappingURL=index.a18cb589.js.map\n","'use strict';\r\n\r\nconst Game = require('../modules/Game.class');\r\nconst {\r\n  STATUS_NON_RUN,\r\n  STATUS_RUN,\r\n  COUNT_WIN,\r\n} = require('../modules/constants');\r\n\r\nconst initialState = {\r\n  status: STATUS_NON_RUN,\r\n  tileField: [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ],\r\n  score: 0,\r\n};\r\n\r\nconst game = new Game(initialState);\r\n\r\nexport const messageStartLose = document.getElementById('message-lose');\r\n\r\nconst startButton = document.getElementById('start');\r\nconst restartButton = document.getElementById('restart');\r\nconst score = document.getElementById('game-score');\r\nconst messageStart = document.getElementById('message-start');\r\nconst messageWin = document.getElementById('message-win');\r\n\r\nconst appendScore = () => {\r\n  game.getScore();\r\n\r\n  if (initialState.score === COUNT_WIN) {\r\n    messageWin.classList.remove('hidden');\r\n  }\r\n\r\n  score.textContent = `${initialState.score}`;\r\n};\r\n\r\n// eslint-disable-next-line no-shadow\r\nconst moveEvent = (event) => moves(event);\r\n\r\nconst start = () => {\r\n  game.start();\r\n  game.setTile();\r\n\r\n  if (game.getState().status === STATUS_RUN) {\r\n    startButton.classList.add('hidden');\r\n    restartButton.classList.remove('hidden');\r\n  }\r\n\r\n  messageStartLose?.classList.add('hidden');\r\n  messageStart.classList.add('hidden');\r\n  document.addEventListener('keydown', moveEvent);\r\n};\r\n\r\nconst restart = () => {\r\n  game.restart();\r\n  appendScore();\r\n  game.setTile();\r\n\r\n  startButton.classList.remove('hidden');\r\n  restartButton.classList.add('hidden');\r\n\r\n  messageStartLose?.classList.add('hidden');\r\n  messageStart.classList.remove('hidden');\r\n  document.removeEventListener('keydown', moveEvent);\r\n};\r\n\r\nstartButton.addEventListener('click', start);\r\nrestartButton.addEventListener('click', restart);\r\n\r\n// eslint-disable-next-line no-shadow\r\nconst moves = (event) => {\r\n  switch (event.key) {\r\n    case 'ArrowUp':\r\n      game.moveUp();\r\n      game.setTile();\r\n      appendScore();\r\n      break;\r\n\r\n    case 'ArrowDown':\r\n      game.moveDown();\r\n      game.setTile();\r\n      appendScore();\r\n      break;\r\n\r\n    case 'ArrowLeft':\r\n      game.moveLeft();\r\n      game.setTile();\r\n      appendScore();\r\n      break;\r\n\r\n    case 'ArrowRight':\r\n      game.moveRight();\r\n      game.setTile();\r\n      appendScore();\r\n      break;\r\n  }\r\n};\r\n","/* eslint-disable max-len */\r\n/* eslint-disable no-console */\r\n'use strict';\r\n\r\nimport { fillRandomEmptyPlaces } from '../scripts/randomAddCellToEmpty';\r\n// eslint-disable-next-line max-len\r\nimport { fillRandomEmptyPlacesStart } from '../scripts/fillRandomEmptyPlacesStart';\r\nimport { moveTiles } from '../scripts/moveTile';\r\nimport { Arrow } from './constants';\r\n\r\nconst { STATUS_RUN } = require('./constants');\r\n\r\nclass Game {\r\n  initialState;\r\n\r\n  constructor(initialState) {\r\n    this.initialState = initialState;\r\n\r\n    console.log(this.initialState);\r\n  }\r\n\r\n  moveUp() {\r\n    const { tileField } = this.initialState;\r\n    const size = tileField.length;\r\n\r\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\r\n      tileField,\r\n      size,\r\n      Arrow.UP,\r\n    );\r\n\r\n    if (mergeOccurred) {\r\n      moveTiles(newTileField, size, Arrow.UP); // Compact tiles again after merging\r\n    }\r\n\r\n    fillRandomEmptyPlaces(this.initialState.tileField);\r\n    console.log(newTileField); // Log the updated tileField after moving up\r\n  }\r\n\r\n  moveLeft() {\r\n    const { tileField } = this.initialState;\r\n    const size = tileField.length;\r\n\r\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\r\n      tileField,\r\n      size,\r\n      Arrow.LEFT,\r\n    );\r\n\r\n    if (mergeOccurred) {\r\n      moveTiles(newTileField, size, Arrow.LEFT);\r\n    }\r\n\r\n    fillRandomEmptyPlaces(this.initialState.tileField);\r\n  }\r\n\r\n  moveRight() {\r\n    const { tileField } = this.initialState;\r\n    const size = tileField.length;\r\n\r\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\r\n      tileField,\r\n      size,\r\n      Arrow.RIGHT,\r\n    );\r\n\r\n    if (mergeOccurred) {\r\n      moveTiles(newTileField, size, Arrow.RIGHT); // Compact tiles again after merging\r\n    }\r\n\r\n    fillRandomEmptyPlaces(this.initialState.tileField);\r\n  }\r\n\r\n  moveDown() {\r\n    const { tileField } = this.initialState;\r\n    const size = tileField.length;\r\n\r\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\r\n      tileField,\r\n      size,\r\n      Arrow.DOWN,\r\n    );\r\n\r\n    if (mergeOccurred) {\r\n      moveTiles(newTileField, size, Arrow.DOWN); // Compact tiles again after merging\r\n    }\r\n\r\n    fillRandomEmptyPlaces(this.initialState.tileField);\r\n  }\r\n\r\n  getScore() {\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < this.initialState.tileField.length; i++) {\r\n      for (let j = 0; j < this.initialState.tileField[i].length; j++) {\r\n        score += this.initialState.tileField[i][j];\r\n      }\r\n    }\r\n\r\n    this.initialState.score = score;\r\n  }\r\n\r\n  getState() {\r\n    return this.initialState;\r\n  }\r\n\r\n  getStatus() {\r\n    // eslint-disable-next-line no-console\r\n    console.log('Current status:', this.initialState.status);\r\n  }\r\n\r\n  start() {\r\n    fillRandomEmptyPlacesStart(this.initialState.tileField);\r\n    this.initialState.status = STATUS_RUN;\r\n  }\r\n\r\n  restart() {\r\n    this.initialState.score = 0;\r\n\r\n    this.initialState.tileField = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n  }\r\n\r\n  setTile() {\r\n    // eslint-disable-next-line max-len\r\n    const table = document.querySelector('.game-field');\r\n\r\n    if (table) {\r\n      const rows = table.querySelectorAll('.field-row');\r\n\r\n      for (let i = 0; i < this.initialState.tileField.length; i++) {\r\n        const cells = rows[i].querySelectorAll('.field-cell');\r\n\r\n        for (let j = 0; j < this.initialState.tileField[i].length; j++) {\r\n          const cell = cells[j];\r\n          const cellValue = this.initialState.tileField[i][j];\r\n\r\n          const currentClass = `field-cell--${cellValue}`;\r\n\r\n          cell.className = 'field-cell';\r\n\r\n          if (cellValue !== 0) {\r\n            cell.classList.add(currentClass);\r\n            cell.textContent = `${cellValue}`;\r\n          } else {\r\n            cell.textContent = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { messageStartLose } from './main';\r\n\r\nexport function getRandomIndexes(max) {\r\n  const indexes = [];\r\n  let count = 0;\r\n\r\n  while (count < 4) {\r\n    const randomIndex = Math.floor(Math.random() * max);\r\n\r\n    if (!indexes.includes(randomIndex)) {\r\n      if (Math.random() < 0.1) {\r\n        indexes.push(randomIndex);\r\n        count++;\r\n      } else if (count < 2) {\r\n        indexes.push(randomIndex);\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return indexes;\r\n}\r\n\r\nexport function fillRandomEmptyPlaces(field) {\r\n  if (!Array.isArray(field)) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Expected field to be an array.');\r\n\r\n    return field;\r\n  }\r\n\r\n  const emptyPositions = [];\r\n\r\n  for (let i = 0; i < field.length; i++) {\r\n    for (let j = 0; j < field[i].length; j++) {\r\n      if (field[i][j] === 0) {\r\n        emptyPositions.push({ x: i, y: j });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (emptyPositions.length === 0) {\r\n    if (messageStartLose) {\r\n      messageStartLose.classList.remove('hidden');\r\n    }\r\n\r\n    return field;\r\n  }\r\n\r\n  // Randomly select an empty position\r\n  const randomIndex = Math.floor(Math.random() * emptyPositions.length);\r\n  const { x, y } = emptyPositions[randomIndex];\r\n\r\n  // Randomly decide whether to add 2 or 4\r\n  const valueToAdd = Math.random() < 0.9 ? 2 : 4;\r\n\r\n  field[x][y] = valueToAdd;\r\n\r\n  return field;\r\n}\r\n","import { getRandomIndexes } from './randomAddCellToEmpty';\r\n\r\nexport function fillRandomEmptyPlacesStart(field) {\r\n  if (!Array.isArray(field)) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Expected field to be an array.');\r\n\r\n    return field;\r\n  }\r\n\r\n  const emptyPositions = [];\r\n\r\n  for (let i = 0; i < field.length; i++) {\r\n    for (let j = 0; j < field[i].length; j++) {\r\n      if (field[i][j] === 0) {\r\n        emptyPositions.push({ x: i, y: j });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (emptyPositions.length >= 2) {\r\n    const randomIndexes = getRandomIndexes(emptyPositions.length);\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      const { x, y } = emptyPositions[randomIndexes[i]];\r\n\r\n      field[x][y] = 2;\r\n    }\r\n  } else {\r\n    // eslint-disable-next-line no-console\r\n    console.log('Not enough empty positions to fill.');\r\n  }\r\n\r\n  return field;\r\n}\r\n","export function moveTiles(tileField, size, direction) {\r\n  let mergeOccurred = false;\r\n  // eslint-disable-next-line max-len\r\n  const mergedTiles = new Array(size).fill(false); // Array to track merged tiles\r\n\r\n  switch (direction) {\r\n    case 'left':\r\n      // Compact tiles (move all tiles to the left)\r\n      for (let row = 0; row < size; row++) {\r\n        for (let col = 1; col < size; col++) {\r\n          if (tileField[row][col] !== 0) {\r\n            let currentCol = col;\r\n\r\n            while (currentCol > 0 && tileField[row][currentCol - 1] === 0) {\r\n              // Move tile to the left\r\n              tileField[row][currentCol - 1] = tileField[row][currentCol];\r\n              tileField[row][currentCol] = 0;\r\n              currentCol--;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'right':\r\n      // Compact tiles (move all tiles to the right)\r\n      for (let row = 0; row < size; row++) {\r\n        for (let col = size - 2; col >= 0; col--) {\r\n          if (tileField[row][col] !== 0) {\r\n            let currentCol = col;\r\n\r\n            while (\r\n              currentCol < size - 1 &&\r\n              tileField[row][currentCol + 1] === 0\r\n            ) {\r\n              // Move tile to the right\r\n              tileField[row][currentCol + 1] = tileField[row][currentCol];\r\n              tileField[row][currentCol] = 0;\r\n              currentCol++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'up':\r\n      // Compact tiles (move all tiles upwards)\r\n      for (let col = 0; col < size; col++) {\r\n        for (let row = 1; row < size; row++) {\r\n          if (tileField[row][col] !== 0) {\r\n            let currentRow = row;\r\n\r\n            while (currentRow > 0 && tileField[currentRow - 1][col] === 0) {\r\n              // Move tile upwards\r\n              tileField[currentRow - 1][col] = tileField[currentRow][col];\r\n              tileField[currentRow][col] = 0;\r\n              currentRow--;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'down':\r\n      // Compact tiles (move all tiles downwards)\r\n      for (let col = 0; col < size; col++) {\r\n        for (let row = size - 2; row >= 0; row--) {\r\n          if (tileField[row][col] !== 0) {\r\n            let currentRow = row;\r\n\r\n            while (\r\n              currentRow < size - 1 &&\r\n              tileField[currentRow + 1][col] === 0\r\n            ) {\r\n              // Move tile downwards\r\n              tileField[currentRow + 1][col] = tileField[currentRow][col];\r\n              tileField[currentRow][col] = 0;\r\n              currentRow++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`Invalid direction: ${direction}`);\r\n  }\r\n\r\n  // Merge tiles (combine adjacent identical tiles)\r\n  switch (direction) {\r\n    case 'left':\r\n      for (let row = 0; row < size; row++) {\r\n        for (let col = 1; col < size; col++) {\r\n          if (\r\n            tileField[row][col] !== 0 &&\r\n            tileField[row][col] === tileField[row][col - 1] &&\r\n            !mergedTiles[col - 1]\r\n          ) {\r\n            // Merge tiles\r\n            tileField[row][col - 1] *= 2;\r\n            tileField[row][col] = 0;\r\n            mergedTiles[col - 1] = true;\r\n            mergeOccurred = true;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'right':\r\n      for (let row = 0; row < size; row++) {\r\n        for (let col = size - 2; col >= 0; col--) {\r\n          if (\r\n            tileField[row][col] !== 0 &&\r\n            tileField[row][col] === tileField[row][col + 1] &&\r\n            !mergedTiles[col + 1]\r\n          ) {\r\n            // Merge tiles\r\n            tileField[row][col + 1] *= 2;\r\n            tileField[row][col] = 0;\r\n            mergedTiles[col + 1] = true;\r\n            mergeOccurred = true;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'up':\r\n      for (let col = 0; col < size; col++) {\r\n        for (let row = 1; row < size; row++) {\r\n          if (\r\n            tileField[row][col] !== 0 &&\r\n            tileField[row][col] === tileField[row - 1][col] &&\r\n            !mergedTiles[row - 1]\r\n          ) {\r\n            // Merge tiles\r\n            tileField[row - 1][col] *= 2;\r\n            tileField[row][col] = 0;\r\n            mergedTiles[row - 1] = true;\r\n            mergeOccurred = true;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'down':\r\n      for (let col = 0; col < size; col++) {\r\n        for (let row = size - 2; row >= 0; row--) {\r\n          if (\r\n            tileField[row][col] !== 0 &&\r\n            tileField[row][col] === tileField[row + 1][col] &&\r\n            !mergedTiles[row + 1]\r\n          ) {\r\n            // Merge tiles\r\n            tileField[row + 1][col] *= 2;\r\n            tileField[row][col] = 0;\r\n            mergedTiles[row + 1] = true;\r\n            mergeOccurred = true;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`Invalid direction: ${direction}`);\r\n  }\r\n\r\n  return { mergeOccurred, tileField };\r\n}\r\n","export const STATUS_RUN = 'game run';\r\nexport const STATUS_NON_RUN = 'game is not started';\r\nexport const Arrow = {\r\n  RIGHT: 'right',\r\n  LEFT: 'left',\r\n  DOWN: 'down',\r\n  UP: 'up',\r\n};\r\nexport const COUNT_WIN = 2048;\r\n"],"names":["$3d28d7f1aac198f5$exports","$6abde36fb3b0ae39$export$fe52599b6fc81048","field","Array","isArray","console","error","emptyPositions","i","length","j","push","x","y","$197cd56b15c33885$export$46253330eead970a","classList","remove","randomIndex","Math","floor","random","_emptyPositions_randomIndex","$46396ee5d674c042$export$c590f9015b9c5094","tileField","size","direction","mergeOccurred","mergedTiles","fill","row","col","currentCol","row1","col1","currentCol1","col2","row2","currentRow","col3","row3","currentRow1","Error","concat","row4","col4","row5","col5","col6","row6","col7","row7","$75b403991082ef97$export$cb0e242d14fc87d0","$75b403991082ef97$export$21b07c8f274aebd5","RIGHT","LEFT","DOWN","UP","protoProps","Game","initialState","key","value","instance","Constructor","TypeError","Object","defineProperty","enumerable","configurable","writable","obj","log","_moveTiles","newTileField","score","status","randomIndexes","max","indexes","count","includes","i1","_emptyPositions_randomIndexes_i","table","document","querySelector","rows","querySelectorAll","cells","cell","cellValue","currentClass","className","add","textContent","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","prototype","$197cd56b15c33885$var$initialState","$197cd56b15c33885$var$game","getElementById","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$restartButton","$197cd56b15c33885$var$score","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$appendScore","getScore","$197cd56b15c33885$var$moveEvent","event","$197cd56b15c33885$var$moves","addEventListener","start","setTile","getState","restart","removeEventListener","moveUp","moveDown","moveLeft","moveRight"],"version":3,"file":"index.a18cb589.js.map"}